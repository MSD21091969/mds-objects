import copy

def flatten_schema(schema: dict) -> dict:
    """
    Resolves $ref references in a JSON schema generated by Pydantic V2
    to make it compatible with older schema validators that don't support it.
    """
    if "$defs" not in schema:
        return schema

    resolved_schema = copy.deepcopy(schema)
    defs = resolved_schema.pop("$defs")

    def resolve_refs(obj):
        if isinstance(obj, dict):
            if "$ref" in obj:
                ref_path = obj["$ref"].split("/")
                # Expecting #/$defs/ModelName
                if len(ref_path) == 3 and ref_path[0] == "#" and ref_path[1] == "$defs":
                    def_name = ref_path[2]
                    # Recursively resolve the definition itself
                    definition = defs.get(def_name, {})
                    return resolve_refs(definition) if definition else obj
                else:
                    return obj # Return as is if the path is not as expected
            else:
                return {k: resolve_refs(v) for k, v in obj.items()}
        elif isinstance(obj, list):
            return [resolve_refs(item) for item in obj]
        else:
            return obj

    return resolve_refs(resolved_schema)
